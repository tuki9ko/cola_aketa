// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ColaType is an object representing the database table.
type ColaType struct {
	ID             int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ManufacturerID int    `boil:"manufacturer_id" json:"manufacturer_id" toml:"manufacturer_id" yaml:"manufacturer_id"`
	Name           string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Amount         int    `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	PackageID      int    `boil:"package_id" json:"package_id" toml:"package_id" yaml:"package_id"`
	Calories       int    `boil:"calories" json:"calories" toml:"calories" yaml:"calories"`

	R *colaTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L colaTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ColaTypeColumns = struct {
	ID             string
	ManufacturerID string
	Name           string
	Amount         string
	PackageID      string
	Calories       string
}{
	ID:             "id",
	ManufacturerID: "manufacturer_id",
	Name:           "name",
	Amount:         "amount",
	PackageID:      "package_id",
	Calories:       "calories",
}

var ColaTypeTableColumns = struct {
	ID             string
	ManufacturerID string
	Name           string
	Amount         string
	PackageID      string
	Calories       string
}{
	ID:             "cola_types.id",
	ManufacturerID: "cola_types.manufacturer_id",
	Name:           "cola_types.name",
	Amount:         "cola_types.amount",
	PackageID:      "cola_types.package_id",
	Calories:       "cola_types.calories",
}

// Generated where

var ColaTypeWhere = struct {
	ID             whereHelperint
	ManufacturerID whereHelperint
	Name           whereHelperstring
	Amount         whereHelperint
	PackageID      whereHelperint
	Calories       whereHelperint
}{
	ID:             whereHelperint{field: "\"cola_types\".\"id\""},
	ManufacturerID: whereHelperint{field: "\"cola_types\".\"manufacturer_id\""},
	Name:           whereHelperstring{field: "\"cola_types\".\"name\""},
	Amount:         whereHelperint{field: "\"cola_types\".\"amount\""},
	PackageID:      whereHelperint{field: "\"cola_types\".\"package_id\""},
	Calories:       whereHelperint{field: "\"cola_types\".\"calories\""},
}

// ColaTypeRels is where relationship names are stored.
var ColaTypeRels = struct {
}{}

// colaTypeR is where relationships are stored.
type colaTypeR struct {
}

// NewStruct creates a new relationship struct
func (*colaTypeR) NewStruct() *colaTypeR {
	return &colaTypeR{}
}

// colaTypeL is where Load methods for each relationship are stored.
type colaTypeL struct{}

var (
	colaTypeAllColumns            = []string{"id", "manufacturer_id", "name", "amount", "package_id", "calories"}
	colaTypeColumnsWithoutDefault = []string{"manufacturer_id", "name", "amount", "package_id", "calories"}
	colaTypeColumnsWithDefault    = []string{"id"}
	colaTypePrimaryKeyColumns     = []string{"id"}
	colaTypeGeneratedColumns      = []string{}
)

type (
	// ColaTypeSlice is an alias for a slice of pointers to ColaType.
	// This should almost always be used instead of []ColaType.
	ColaTypeSlice []*ColaType
	// ColaTypeHook is the signature for custom ColaType hook methods
	ColaTypeHook func(context.Context, boil.ContextExecutor, *ColaType) error

	colaTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	colaTypeType                 = reflect.TypeOf(&ColaType{})
	colaTypeMapping              = queries.MakeStructMapping(colaTypeType)
	colaTypePrimaryKeyMapping, _ = queries.BindMapping(colaTypeType, colaTypeMapping, colaTypePrimaryKeyColumns)
	colaTypeInsertCacheMut       sync.RWMutex
	colaTypeInsertCache          = make(map[string]insertCache)
	colaTypeUpdateCacheMut       sync.RWMutex
	colaTypeUpdateCache          = make(map[string]updateCache)
	colaTypeUpsertCacheMut       sync.RWMutex
	colaTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var colaTypeAfterSelectHooks []ColaTypeHook

var colaTypeBeforeInsertHooks []ColaTypeHook
var colaTypeAfterInsertHooks []ColaTypeHook

var colaTypeBeforeUpdateHooks []ColaTypeHook
var colaTypeAfterUpdateHooks []ColaTypeHook

var colaTypeBeforeDeleteHooks []ColaTypeHook
var colaTypeAfterDeleteHooks []ColaTypeHook

var colaTypeBeforeUpsertHooks []ColaTypeHook
var colaTypeAfterUpsertHooks []ColaTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ColaType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ColaType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ColaType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ColaType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ColaType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ColaType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ColaType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ColaType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ColaType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colaTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddColaTypeHook registers your hook function for all future operations.
func AddColaTypeHook(hookPoint boil.HookPoint, colaTypeHook ColaTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		colaTypeAfterSelectHooks = append(colaTypeAfterSelectHooks, colaTypeHook)
	case boil.BeforeInsertHook:
		colaTypeBeforeInsertHooks = append(colaTypeBeforeInsertHooks, colaTypeHook)
	case boil.AfterInsertHook:
		colaTypeAfterInsertHooks = append(colaTypeAfterInsertHooks, colaTypeHook)
	case boil.BeforeUpdateHook:
		colaTypeBeforeUpdateHooks = append(colaTypeBeforeUpdateHooks, colaTypeHook)
	case boil.AfterUpdateHook:
		colaTypeAfterUpdateHooks = append(colaTypeAfterUpdateHooks, colaTypeHook)
	case boil.BeforeDeleteHook:
		colaTypeBeforeDeleteHooks = append(colaTypeBeforeDeleteHooks, colaTypeHook)
	case boil.AfterDeleteHook:
		colaTypeAfterDeleteHooks = append(colaTypeAfterDeleteHooks, colaTypeHook)
	case boil.BeforeUpsertHook:
		colaTypeBeforeUpsertHooks = append(colaTypeBeforeUpsertHooks, colaTypeHook)
	case boil.AfterUpsertHook:
		colaTypeAfterUpsertHooks = append(colaTypeAfterUpsertHooks, colaTypeHook)
	}
}

// One returns a single colaType record from the query.
func (q colaTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ColaType, error) {
	o := &ColaType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cola_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ColaType records from the query.
func (q colaTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ColaTypeSlice, error) {
	var o []*ColaType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ColaType slice")
	}

	if len(colaTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ColaType records in the query.
func (q colaTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cola_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q colaTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cola_types exists")
	}

	return count > 0, nil
}

// ColaTypes retrieves all the records using an executor.
func ColaTypes(mods ...qm.QueryMod) colaTypeQuery {
	mods = append(mods, qm.From("\"cola_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cola_types\".*"})
	}

	return colaTypeQuery{q}
}

// FindColaType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindColaType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ColaType, error) {
	colaTypeObj := &ColaType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cola_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, colaTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cola_types")
	}

	if err = colaTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return colaTypeObj, err
	}

	return colaTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ColaType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cola_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colaTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	colaTypeInsertCacheMut.RLock()
	cache, cached := colaTypeInsertCache[key]
	colaTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			colaTypeAllColumns,
			colaTypeColumnsWithDefault,
			colaTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(colaTypeType, colaTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(colaTypeType, colaTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cola_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cola_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cola_types")
	}

	if !cached {
		colaTypeInsertCacheMut.Lock()
		colaTypeInsertCache[key] = cache
		colaTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ColaType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ColaType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	colaTypeUpdateCacheMut.RLock()
	cache, cached := colaTypeUpdateCache[key]
	colaTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			colaTypeAllColumns,
			colaTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cola_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cola_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, colaTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(colaTypeType, colaTypeMapping, append(wl, colaTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cola_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cola_types")
	}

	if !cached {
		colaTypeUpdateCacheMut.Lock()
		colaTypeUpdateCache[key] = cache
		colaTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q colaTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cola_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cola_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ColaTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cola_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, colaTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in colaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all colaType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ColaType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cola_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colaTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	colaTypeUpsertCacheMut.RLock()
	cache, cached := colaTypeUpsertCache[key]
	colaTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			colaTypeAllColumns,
			colaTypeColumnsWithDefault,
			colaTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			colaTypeAllColumns,
			colaTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cola_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(colaTypePrimaryKeyColumns))
			copy(conflict, colaTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cola_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(colaTypeType, colaTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(colaTypeType, colaTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cola_types")
	}

	if !cached {
		colaTypeUpsertCacheMut.Lock()
		colaTypeUpsertCache[key] = cache
		colaTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ColaType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ColaType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ColaType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), colaTypePrimaryKeyMapping)
	sql := "DELETE FROM \"cola_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cola_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cola_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q colaTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no colaTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cola_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cola_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ColaTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(colaTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cola_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colaTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from colaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cola_types")
	}

	if len(colaTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ColaType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindColaType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ColaTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ColaTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cola_types\".* FROM \"cola_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colaTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ColaTypeSlice")
	}

	*o = slice

	return nil
}

// ColaTypeExists checks if the ColaType row exists.
func ColaTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cola_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cola_types exists")
	}

	return exists, nil
}
