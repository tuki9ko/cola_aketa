// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testColaTypes(t *testing.T) {
	t.Parallel()

	query := ColaTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testColaTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testColaTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ColaTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testColaTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ColaTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testColaTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ColaTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ColaType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ColaTypeExists to return true, but got false.")
	}
}

func testColaTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	colaTypeFound, err := FindColaType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if colaTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testColaTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ColaTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testColaTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ColaTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testColaTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	colaTypeOne := &ColaType{}
	colaTypeTwo := &ColaType{}
	if err = randomize.Struct(seed, colaTypeOne, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}
	if err = randomize.Struct(seed, colaTypeTwo, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = colaTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = colaTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ColaTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testColaTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	colaTypeOne := &ColaType{}
	colaTypeTwo := &ColaType{}
	if err = randomize.Struct(seed, colaTypeOne, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}
	if err = randomize.Struct(seed, colaTypeTwo, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = colaTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = colaTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func colaTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func colaTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ColaType) error {
	*o = ColaType{}
	return nil
}

func testColaTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ColaType{}
	o := &ColaType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, colaTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ColaType object: %s", err)
	}

	AddColaTypeHook(boil.BeforeInsertHook, colaTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	colaTypeBeforeInsertHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.AfterInsertHook, colaTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	colaTypeAfterInsertHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.AfterSelectHook, colaTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	colaTypeAfterSelectHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.BeforeUpdateHook, colaTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	colaTypeBeforeUpdateHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.AfterUpdateHook, colaTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	colaTypeAfterUpdateHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.BeforeDeleteHook, colaTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	colaTypeBeforeDeleteHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.AfterDeleteHook, colaTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	colaTypeAfterDeleteHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.BeforeUpsertHook, colaTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	colaTypeBeforeUpsertHooks = []ColaTypeHook{}

	AddColaTypeHook(boil.AfterUpsertHook, colaTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	colaTypeAfterUpsertHooks = []ColaTypeHook{}
}

func testColaTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testColaTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(colaTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testColaTypeToManyColaColaResults(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ColaType
	var b, c ColaResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, colaResultDBTypes, false, colaResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, colaResultDBTypes, false, colaResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ColaID = a.ID
	c.ColaID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ColaColaResults().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ColaID == b.ColaID {
			bFound = true
		}
		if v.ColaID == c.ColaID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ColaTypeSlice{&a}
	if err = a.L.LoadColaColaResults(ctx, tx, false, (*[]*ColaType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ColaColaResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ColaColaResults = nil
	if err = a.L.LoadColaColaResults(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ColaColaResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testColaTypeToManyAddOpColaColaResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ColaType
	var b, c, d, e ColaResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, colaTypeDBTypes, false, strmangle.SetComplement(colaTypePrimaryKeyColumns, colaTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ColaResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, colaResultDBTypes, false, strmangle.SetComplement(colaResultPrimaryKeyColumns, colaResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ColaResult{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddColaColaResults(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ColaID {
			t.Error("foreign key was wrong value", a.ID, first.ColaID)
		}
		if a.ID != second.ColaID {
			t.Error("foreign key was wrong value", a.ID, second.ColaID)
		}

		if first.R.Cola != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Cola != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ColaColaResults[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ColaColaResults[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ColaColaResults().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testColaTypeToOneManufacturerUsingManufacturer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ColaType
	var foreign Manufacturer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, manufacturerDBTypes, false, manufacturerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Manufacturer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ManufacturerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Manufacturer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ColaTypeSlice{&local}
	if err = local.L.LoadManufacturer(ctx, tx, false, (*[]*ColaType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manufacturer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Manufacturer = nil
	if err = local.L.LoadManufacturer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Manufacturer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testColaTypeToOnePackageUsingPackage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ColaType
	var foreign Package

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, colaTypeDBTypes, false, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, packageDBTypes, false, packageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Package struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PackageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Package().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ColaTypeSlice{&local}
	if err = local.L.LoadPackage(ctx, tx, false, (*[]*ColaType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Package == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Package = nil
	if err = local.L.LoadPackage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Package == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testColaTypeToOneSetOpManufacturerUsingManufacturer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ColaType
	var b, c Manufacturer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, colaTypeDBTypes, false, strmangle.SetComplement(colaTypePrimaryKeyColumns, colaTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, manufacturerDBTypes, false, strmangle.SetComplement(manufacturerPrimaryKeyColumns, manufacturerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Manufacturer{&b, &c} {
		err = a.SetManufacturer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Manufacturer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ColaTypes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ManufacturerID != x.ID {
			t.Error("foreign key was wrong value", a.ManufacturerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ManufacturerID))
		reflect.Indirect(reflect.ValueOf(&a.ManufacturerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ManufacturerID != x.ID {
			t.Error("foreign key was wrong value", a.ManufacturerID, x.ID)
		}
	}
}
func testColaTypeToOneSetOpPackageUsingPackage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ColaType
	var b, c Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, colaTypeDBTypes, false, strmangle.SetComplement(colaTypePrimaryKeyColumns, colaTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Package{&b, &c} {
		err = a.SetPackage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Package != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ColaTypes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PackageID != x.ID {
			t.Error("foreign key was wrong value", a.PackageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PackageID))
		reflect.Indirect(reflect.ValueOf(&a.PackageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PackageID != x.ID {
			t.Error("foreign key was wrong value", a.PackageID, x.ID)
		}
	}
}

func testColaTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testColaTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ColaTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testColaTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ColaTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	colaTypeDBTypes = map[string]string{`ID`: `integer`, `ManufacturerID`: `integer`, `Name`: `character varying`, `Amount`: `integer`, `PackageID`: `integer`, `Calories`: `integer`}
	_               = bytes.MinRead
)

func testColaTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(colaTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(colaTypeAllColumns) == len(colaTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testColaTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(colaTypeAllColumns) == len(colaTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ColaType{}
	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, colaTypeDBTypes, true, colaTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(colaTypeAllColumns, colaTypePrimaryKeyColumns) {
		fields = colaTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			colaTypeAllColumns,
			colaTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ColaTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testColaTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(colaTypeAllColumns) == len(colaTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ColaType{}
	if err = randomize.Struct(seed, &o, colaTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ColaType: %s", err)
	}

	count, err := ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, colaTypeDBTypes, false, colaTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ColaType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ColaType: %s", err)
	}

	count, err = ColaTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
